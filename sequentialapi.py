# -*- coding: utf-8 -*-
"""SequentialApi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y6K_EzXaABHMfv0V9OpYZQV8R7i7jlJY
"""

import pandas as pd
import numpy as np

used_features = ["Temp", "PH","D.O. (mg/l)"]
data = pd.read_csv("waterdata.csv", usecols = used_features, encoding= 'unicode_escape')

data

data["Temp"] = pd.to_numeric(data['Temp'], errors='coerce')
data["Temp"] = data["Temp"].replace(np.nan, 0)
data["PH"] = pd.to_numeric(data['PH'], errors='coerce')
data["PH"] = data["PH"].replace(np.nan, 0)
data["D.O. (mg/l)"] = pd.to_numeric(data["D.O. (mg/l)"], errors='coerce')
data["D.O. (mg/l)"] = data["D.O. (mg/l)"].replace(np.nan, 0)

data=data.mask(data["Temp"]==0).fillna(data["Temp"].mean())
data=data.mask(data["PH"]==0).fillna(data["PH"].mean())
data=data.mask(data["D.O. (mg/l)"]==0).fillna(data["D.O. (mg/l)"].mean())
target = data["D.O. (mg/l)"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
     data, target, test_size=0.33, random_state=42)

X_train.head()

train_X = X_train.drop(columns=['D.O. (mg/l)'])
train_X.head()

y_train.shape

train_y = data[['D.O. (mg/l)']]
train_y.head()

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import tensorflowjs as tfjs

n_cols = train_X.shape[1]

model = keras.Sequential(
    [
        layers.Dense(10, activation="relu", name="layer1",input_shape=(n_cols,)),
        layers.Dense(3, activation="relu", name="layer2"),
        layers.Dense(1, name="layer3"),
    ]
)

model.compile(optimizer='adam', loss='mean_squared_error')

from tensorflow.keras.callbacks import EarlyStopping

early_stopping_monitor = EarlyStopping(patience=3)

model.fit(train_X, train_y, validation_split=0.2, epochs=30, callbacks=[early_stopping_monitor])

tfjs_target_dir = "./tfjs"

tfjs.converters.save_keras_model(model, tfjs_target_dir)

test_X = X_test.drop(columns=['D.O. (mg/l)'])
test_X
# test_y_predictions = model.predict(X_test)

30.6,6.7,7.5

data = [[30.6, 7.5]] 
  
# Create the pandas DataFrame 
df = pd.DataFrame(data, columns = ['Temp', 'PH']) 
  
# print dataframe. 
df

# test_y_predictions = model.predict(test_X)
test_y_predictions = model.predict(df)

test_y_predictions

