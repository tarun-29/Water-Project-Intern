# -*- coding: utf-8 -*-
"""LinearRegressionAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lJU4YbZsg_GPX3EiJnYxEUUleQ0gZpc
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
plt.style.use("seaborn-colorblind")
# %matplotlib inline

used_features = ["Temp", "PH","D.O. (mg/l)"]
water = pd.read_csv('waterdata.csv', usecols = used_features, encoding= 'unicode_escape')
# m = pd.read_csv('waterdata.csv', encoding= 'unicode_escape')
# target["D.O. (mg/l)"] = m["D.O. (mg/l)"]
print(water.shape)
water.head()
# target.head()

water["Temp"] = pd.to_numeric(water['Temp'], errors='coerce')
water["Temp"] = water["Temp"].replace(np.nan, 0)
water["PH"] = pd.to_numeric(water['PH'], errors='coerce')
water["PH"] = water["PH"].replace(np.nan, 0)
water["D.O. (mg/l)"] = pd.to_numeric(water["D.O. (mg/l)"], errors='coerce')
water["D.O. (mg/l)"] = water["D.O. (mg/l)"].replace(np.nan, 0)

water=water.mask(water["Temp"]==0).fillna(water["Temp"].mean())
water=water.mask(water["PH"]==0).fillna(water["PH"].mean())
water=water.mask(water["D.O. (mg/l)"]==0).fillna(water["D.O. (mg/l)"].mean())

water

target = water["D.O. (mg/l)"]
features = water.drop('D.O. (mg/l)',axis=1)

features

target

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
     water, target, test_size=0.33, random_state=42)

# numeric_columns = ["Temp", "PH","D.O. (mg/l)"]
numeric_columns = ["Temp", "PH"]
X_train.drop('D.O. (mg/l)',axis=1, inplace=True)
X_test.drop('D.O. (mg/l)',axis=1, inplace=True)
X_test

numeric_features = [tf.feature_column.numeric_column(key = column) for column in numeric_columns]
print(numeric_features[0])

linear_features = numeric_features

training_input_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(x=X_train, y=y_train, batch_size=32, shuffle=True, num_epochs=None)

eval_input_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(x=X_test, y=y_test, batch_size=32, shuffle=False, num_epochs = 1)

linear_regressor = tf.estimator.LinearRegressor(feature_columns=linear_features,
                                                model_dir = "linear_regressor")

linear_regressor.train(input_fn = training_input_fn,steps=2000)

linear_regressor.evaluate(input_fn = eval_input_fn)

pred = list(linear_regressor.predict(input_fn = eval_input_fn))
pred = [p['predictions'][0] for p in pred]

prices = (pred)
print(prices)

X_test

y_test

predict_x = {
    'Temp': [30.1],
    'PH': [7.5],
}

def input_fn(features, batch_size=256):
    """An input function for prediction."""
    # Convert the inputs to a Dataset without labels.
    return tf.data.Dataset.from_tensor_slices(dict(features)).batch(10)

pred = linear_regressor.predict(
    input_fn=lambda: input_fn(predict_x))

pred

pred = [p['predictions'][0] for p in pred]

pred

